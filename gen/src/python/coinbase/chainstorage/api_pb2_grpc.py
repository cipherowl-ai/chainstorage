# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from coinbase.chainstorage import api_pb2 as coinbase_dot_chainstorage_dot_api__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in coinbase/chainstorage/api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChainStorageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLatestBlock = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetLatestBlock',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetLatestBlockRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetLatestBlockResponse.FromString,
                _registered_method=True)
        self.GetBlockFile = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetBlockFile',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFileRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFileResponse.FromString,
                _registered_method=True)
        self.GetBlockFilesByRange = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetBlockFilesByRange',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFilesByRangeRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFilesByRangeResponse.FromString,
                _registered_method=True)
        self.GetRawBlock = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetRawBlock',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlockRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlockResponse.FromString,
                _registered_method=True)
        self.GetRawBlocksByRange = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetRawBlocksByRange',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlocksByRangeRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlocksByRangeResponse.FromString,
                _registered_method=True)
        self.GetNativeBlock = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetNativeBlock',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlockRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlockResponse.FromString,
                _registered_method=True)
        self.GetNativeBlocksByRange = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetNativeBlocksByRange',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlocksByRangeRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlocksByRangeResponse.FromString,
                _registered_method=True)
        self.GetRosettaBlock = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetRosettaBlock',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlockRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlockResponse.FromString,
                _registered_method=True)
        self.GetRosettaBlocksByRange = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetRosettaBlocksByRange',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlocksByRangeRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlocksByRangeResponse.FromString,
                _registered_method=True)
        self.StreamChainEvents = channel.unary_stream(
                '/coinbase.chainstorage.ChainStorage/StreamChainEvents',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.ChainEventsRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.ChainEventsResponse.FromString,
                _registered_method=True)
        self.GetChainEvents = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetChainEvents',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainEventsRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainEventsResponse.FromString,
                _registered_method=True)
        self.GetChainMetadata = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetChainMetadata',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainMetadataRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainMetadataResponse.FromString,
                _registered_method=True)
        self.GetVersionedChainEvent = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetVersionedChainEvent',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetVersionedChainEventRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetVersionedChainEventResponse.FromString,
                _registered_method=True)
        self.GetBlockByTransaction = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetBlockByTransaction',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockByTransactionRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockByTransactionResponse.FromString,
                _registered_method=True)
        self.GetNativeTransaction = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetNativeTransaction',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeTransactionRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeTransactionResponse.FromString,
                _registered_method=True)
        self.GetVerifiedAccountState = channel.unary_unary(
                '/coinbase.chainstorage.ChainStorage/GetVerifiedAccountState',
                request_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetVerifiedAccountStateRequest.SerializeToString,
                response_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetVerifiedAccountStateResponse.FromString,
                _registered_method=True)


class ChainStorageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLatestBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockFilesByRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawBlocksByRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNativeBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNativeBlocksByRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRosettaBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRosettaBlocksByRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChainEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChainEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChainMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersionedChainEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockByTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNativeTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVerifiedAccountState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChainStorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLatestBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestBlock,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetLatestBlockRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetLatestBlockResponse.SerializeToString,
            ),
            'GetBlockFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockFile,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFileRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFileResponse.SerializeToString,
            ),
            'GetBlockFilesByRange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockFilesByRange,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFilesByRangeRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockFilesByRangeResponse.SerializeToString,
            ),
            'GetRawBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRawBlock,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlockRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlockResponse.SerializeToString,
            ),
            'GetRawBlocksByRange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRawBlocksByRange,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlocksByRangeRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRawBlocksByRangeResponse.SerializeToString,
            ),
            'GetNativeBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNativeBlock,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlockRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlockResponse.SerializeToString,
            ),
            'GetNativeBlocksByRange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNativeBlocksByRange,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlocksByRangeRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlocksByRangeResponse.SerializeToString,
            ),
            'GetRosettaBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRosettaBlock,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlockRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlockResponse.SerializeToString,
            ),
            'GetRosettaBlocksByRange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRosettaBlocksByRange,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlocksByRangeRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlocksByRangeResponse.SerializeToString,
            ),
            'StreamChainEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChainEvents,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.ChainEventsRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.ChainEventsResponse.SerializeToString,
            ),
            'GetChainEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChainEvents,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainEventsRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainEventsResponse.SerializeToString,
            ),
            'GetChainMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChainMetadata,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainMetadataRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetChainMetadataResponse.SerializeToString,
            ),
            'GetVersionedChainEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersionedChainEvent,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetVersionedChainEventRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetVersionedChainEventResponse.SerializeToString,
            ),
            'GetBlockByTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockByTransaction,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockByTransactionRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetBlockByTransactionResponse.SerializeToString,
            ),
            'GetNativeTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNativeTransaction,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeTransactionRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetNativeTransactionResponse.SerializeToString,
            ),
            'GetVerifiedAccountState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVerifiedAccountState,
                    request_deserializer=coinbase_dot_chainstorage_dot_api__pb2.GetVerifiedAccountStateRequest.FromString,
                    response_serializer=coinbase_dot_chainstorage_dot_api__pb2.GetVerifiedAccountStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinbase.chainstorage.ChainStorage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('coinbase.chainstorage.ChainStorage', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChainStorage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLatestBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetLatestBlock',
            coinbase_dot_chainstorage_dot_api__pb2.GetLatestBlockRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetLatestBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetBlockFile',
            coinbase_dot_chainstorage_dot_api__pb2.GetBlockFileRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetBlockFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockFilesByRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetBlockFilesByRange',
            coinbase_dot_chainstorage_dot_api__pb2.GetBlockFilesByRangeRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetBlockFilesByRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRawBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetRawBlock',
            coinbase_dot_chainstorage_dot_api__pb2.GetRawBlockRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetRawBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRawBlocksByRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetRawBlocksByRange',
            coinbase_dot_chainstorage_dot_api__pb2.GetRawBlocksByRangeRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetRawBlocksByRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNativeBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetNativeBlock',
            coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlockRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNativeBlocksByRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetNativeBlocksByRange',
            coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlocksByRangeRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetNativeBlocksByRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRosettaBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetRosettaBlock',
            coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlockRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRosettaBlocksByRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetRosettaBlocksByRange',
            coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlocksByRangeRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetRosettaBlocksByRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChainEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/StreamChainEvents',
            coinbase_dot_chainstorage_dot_api__pb2.ChainEventsRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.ChainEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChainEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetChainEvents',
            coinbase_dot_chainstorage_dot_api__pb2.GetChainEventsRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetChainEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChainMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetChainMetadata',
            coinbase_dot_chainstorage_dot_api__pb2.GetChainMetadataRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetChainMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVersionedChainEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetVersionedChainEvent',
            coinbase_dot_chainstorage_dot_api__pb2.GetVersionedChainEventRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetVersionedChainEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockByTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetBlockByTransaction',
            coinbase_dot_chainstorage_dot_api__pb2.GetBlockByTransactionRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetBlockByTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNativeTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetNativeTransaction',
            coinbase_dot_chainstorage_dot_api__pb2.GetNativeTransactionRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetNativeTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVerifiedAccountState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coinbase.chainstorage.ChainStorage/GetVerifiedAccountState',
            coinbase_dot_chainstorage_dot_api__pb2.GetVerifiedAccountStateRequest.SerializeToString,
            coinbase_dot_chainstorage_dot_api__pb2.GetVerifiedAccountStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
