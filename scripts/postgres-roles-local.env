# ===================================================================
# Chainstorage Local Development - Role-Based PostgreSQL Configuration
# ===================================================================
# Load this file with: source scripts/postgres-roles-local.env

# Basic PostgreSQL connection settings
export CHAINSTORAGE_AWS_POSTGRES_HOST="localhost"
export CHAINSTORAGE_AWS_POSTGRES_PORT="5433"
export CHAINSTORAGE_AWS_POSTGRES_SSL_MODE="disable"

# Role-Based Users (NEW - recommended approach)
# These users are created by scripts/init-chainstorage-postgres.sh
export CHAINSTORAGE_AWS_POSTGRES_MASTER_USER="postgres"
export CHAINSTORAGE_AWS_POSTGRES_MASTER_PASSWORD="postgres"

export CHAINSTORAGE_AWS_POSTGRES_WORKER_USER="chainstorage_worker"
export CHAINSTORAGE_AWS_POSTGRES_WORKER_PASSWORD="chainstorage_worker"

export CHAINSTORAGE_AWS_POSTGRES_SERVER_USER="chainstorage_server"
export CHAINSTORAGE_AWS_POSTGRES_SERVER_PASSWORD="chainstorage_server"

# Legacy single-user fields (leave empty to use role-based)
# export CHAINSTORAGE_AWS_POSTGRES_USER=""
# export CHAINSTORAGE_AWS_POSTGRES_PASSWORD=""

# Meta storage type
export CHAINSTORAGE_STORAGE_TYPE_META="POSTGRES"

# ===================================================================
# Usage Examples:
# ===================================================================
# 1. Load this configuration:
#    source scripts/postgres-roles-local.env
#
# 2. Start local services:
#    docker-compose -f docker-compose-local-dev.yml up -d
